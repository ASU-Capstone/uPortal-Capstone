<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">
                        
    <import resource="classpath:commonTestContext.xml"/>
    
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list merge="true">
                <value>classpath:/dataSource.properties</value>
            </list>
        </property>
    </bean>

    <bean id="TestDb" abstract="true" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${hibernate.connection.driver_class}" />
        <property name="url" value="${hibernate.connection.url}" />
        <property name="username" value="${hibernate.connection.username}" />
        <property name="password" value="${hibernate.connection.password}" />
        
        <property name="maxActive" value="50" />
        <property name="maxIdle" value="10" />
        <property name="maxWait" value="1000" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="300" />
        <property name="logAbandoned" value="true" />
        <property name="poolPreparedStatements" value="false" />
    </bean>
    
    <bean id="factoryBean" class="org.jasig.portal.jpa.EventingLocalContainerEntityManagerFactoryBean" depends-on="" autowire="byType">
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
        <property name="persistenceUnitName" value="${persistenceUnitName}" />
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="persistenceUnitName">${persistenceUnitName}</prop>
                <!-- Uncomment for testing with a cache
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                -->
            </props>
        </property>
    </bean>

    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="generateDdl" value="true" />
    </bean>
    
    <bean id="jpaInterceptor" class="org.springframework.orm.jpa.JpaInterceptor">
        <property name="entityManagerFactory" ref="factoryBean" />
    </bean>
    
    <bean class="org.jasig.portal.hibernate.HibernateConfigurationAwareInjector" />
    
    <bean class="org.jasig.portal.jpa.OpenEntityManagerAspect" />

    <!-- This mimics what <tx:annotation-driven/> does but uses our custom TransactionManagerCachingTransactionInterceptor -->    
    <bean id="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0" 
            class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
    <bean id="org.springframework.transaction.interceptor.TransactionInterceptor#0"
            class="org.jasig.portal.spring.tx.DialectAwareTransactionInterceptor">
        <property name="transactionAttributeSource" ref="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0" />
        <property name="transactionManagerBeanName" value="transactionManager" />
    </bean>
    <bean id="org.springframework.transaction.config.internalTransactionAdvisor" 
            class="org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor">
        <property name="transactionAttributeSource" ref="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0" />
        <property name="adviceBeanName" value="org.springframework.transaction.interceptor.TransactionInterceptor#0" />
    </bean>
    
    <aop:config>
        <aop:pointcut id="daoExecution" 
            expression="within(@org.springframework.stereotype.Repository *) &amp;&amp; execution(* org.jasig.portal..*.*(..))"/>
            
        <aop:aspect ref="sqlNextExceptionLoggerAspect">
            <aop:after-throwing pointcut-ref="daoExecution" method="logBatchUpdateExceptions" throwing="t"/>
        </aop:aspect>
    </aop:config>
    
    <bean id="sqlNextExceptionLoggerAspect" class="org.jasig.portal.portlet.dao.jpa.SQLNextExceptionLoggerAspect" />
    
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" lazy-init="false" />
    
    <bean class="org.jasig.portal.jpa.cache.EntityManagerCacheImpl">
        <property name="contentCache">
            <bean id="portalInfoProvider" class="org.jasig.portal.spring.MockitoFactoryBean">
                <constructor-arg value="net.sf.ehcache.Ehcache" />
            </bean>
        </property>
    </bean>
    
    <bean id="taggedCacheEntryPurger" class="org.jasig.portal.spring.MockitoFactoryBean">
        <constructor-arg value="org.jasig.portal.utils.cache.TaggedCacheEntryPurger" />
    </bean>
</beans>


